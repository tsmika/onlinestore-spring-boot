customer.select=SELECT C.CUSTOMER_ID, C.LOGIN, C.PASSWORD, C.ROLE, C.IS_ACTUAL FROM CUSTOMER AS C ORDER BY C.LOGIN
customer.findById=SELECT C.CUSTOMER_ID, C.LOGIN, C.PASSWORD, C.ROLE, C.IS_ACTUAL FROM CUSTOMER AS C WHERE C.CUSTOMER_ID = :CUSTOMER_ID
customer.findByLogin=SELECT C.CUSTOMER_ID, C.LOGIN, C.PASSWORD, C.ROLE, C.IS_ACTUAL FROM CUSTOMER AS C WHERE C.LOGIN = :CUSTOMER_LOGIN
customer.searchCustomersByLogin=SELECT C.CUSTOMER_ID, C.LOGIN, C.PASSWORD, C.ROLE, C.IS_ACTUAL FROM CUSTOMER AS C WHERE C.LOGIN LIKE :FILTER ORDER BY C.LOGIN
customer.create=INSERT INTO CUSTOMER(LOGIN, PASSWORD, ROLE, IS_ACTUAL)  VALUES (:LOGIN, :PASSWORD, :ROLE, :IS_ACTUAL)
customer.checkLogin=SELECT COUNT(LOGIN) FROM CUSTOMER WHERE lower(LOGIN) = lower(:LOGIN)
customer.update=UPDATE CUSTOMER SET LOGIN = :LOGIN, PASSWORD = :PASSWORD, ROLE = :ROLE, IS_ACTUAL = :IS_ACTUAL WHERE CUSTOMER_ID = :CUSTOMER_ID

product.selectAll=SELECT P.PRODUCT_ID, P.PICTURE, P.SHORT_DESCRIPTION, P.DETAIL_DESCRIPTION, P.PRICE, P.CREATION_DATE, P.UPDATE_DATE, P.CHANGED_BY FROM PRODUCT AS P ORDER BY P.SHORT_DESCRIPTION
product.selectByDescription=SELECT P.PRODUCT_ID, P.PICTURE, P.SHORT_DESCRIPTION, P.DETAIL_DESCRIPTION, P.PRICE, P.CREATION_DATE, P.UPDATE_DATE, P.CHANGED_BY FROM PRODUCT AS P WHERE P.SHORT_DESCRIPTION LIKE :FILTER ORDER BY P.SHORT_DESCRIPTION
product.selectById=SELECT P.PRODUCT_ID, P.PICTURE, P.SHORT_DESCRIPTION, P.DETAIL_DESCRIPTION, P.PRICE, P.CREATION_DATE, P.UPDATE_DATE, P.CHANGED_BY FROM PRODUCT AS P WHERE P.PRODUCT_ID = :ID
product.update=UPDATE PRODUCT SET PICTURE = :PICTURE, SHORT_DESCRIPTION = :SHORT_DESCRIPTION, DETAIL_DESCRIPTION = :DETAIL_DESCRIPTION, PRICE = :PRICE, UPDATE_DATE = NOW(), CHANGED_BY = :CHANGED_BY WHERE PRODUCT_ID = :PRODUCT_ID
product.create=INSERT INTO PRODUCT (PICTURE, SHORT_DESCRIPTION, DETAIL_DESCRIPTION, PRICE, CREATION_DATE, UPDATE_DATE, CHANGED_BY)\
  \ VALUES(:PICTURE, :SHORT_DESCRIPTION,:DETAIL_DESCRIPTION, :PRICE, NOW(), NOW(), :CHANGED_BY)
product.checkShortDescription=SELECT COUNT(SHORT_DESCRIPTION) FROM PRODUCT WHERE lower(SHORT_DESCRIPTION) = lower(:SHORT_DESCRIPTION)
product.delete=DELETE FROM PRODUCT WHERE PRODUCT_ID = :ID

cartRecord.create=INSERT INTO CART_RECORDS (CUSTOMER_ID, PRODUCT_ID, QUANTITY)  VALUES (:CUSTOMER_ID, :PRODUCT_ID, :QUANTITY)
cartRecord.update=UPDATE CART_RECORDS SET CUSTOMER_ID = :CUSTOMER_ID, PRODUCT_ID = :PRODUCT_ID, QUANTITY = :QUANTITY WHERE CUSTOMER_ID = :CUSTOMER_ID AND PRODUCT_ID = :PRODUCT_ID
cartRecord.delete=DELETE FROM CART_RECORDS WHERE CUSTOMER_ID = :CUSTOMER_ID AND PRODUCT_ID = :PRODUCT_ID
cartRecord.findCartRecordsByCustomerId=SELECT CR.CUSTOMER_ID, CR.PRODUCT_ID, CR.QUANTITY FROM CART_RECORDS AS CR WHERE CR.CUSTOMER_ID = :ID
cartRecord.findCartRecordByCustomerIdAndProductId=SELECT CR.CUSTOMER_ID, CR.PRODUCT_ID, CR.QUANTITY FROM CART_RECORDS AS CR WHERE CR.CUSTOMER_ID = :CUSTOMER_ID AND CR.PRODUCT_ID = :PRODUCT_ID
cartRecord.findFilteredCartRecordsByCustomerId=SELECT CR.CUSTOMER_ID, CR.PRODUCT_ID, CR.QUANTITY FROM CART_RECORDS AS CR WHERE\
  \ CR.CUSTOMER_ID = :ID AND CR.PRODUCT_ID IN (SELECT P.PRODUCT_ID FROM PRODUCT AS P WHERE P.SHORT_DESCRIPTION LIKE :FILTER);
cartRecord.findProductInCartRecordsByCustomerId=SELECT CR.CUSTOMER_ID, CR.PRODUCT_ID, CR.QUANTITY FROM CART_RECORDS AS CR WHERE CUSTOMER_ID = :CUSTOMER_ID AND CR.PRODUCT_ID = :PRODUCT_ID;

cartRecordDto.findCartRecordDtosByCustomerId=DROP VIEW IF EXISTS CART_SUM; \
  \ CREATE VIEW CART_SUM AS SELECT CR.CUSTOMER_ID, CR.PRODUCT_ID, CR.QUANTITY, P.SHORT_DESCRIPTION, P.PRICE, CR.QUANTITY*P.PRICE AS SUMMA\
  \ FROM CART_RECORDS AS CR, PRODUCT AS P WHERE CR.PRODUCT_ID = P.PRODUCT_ID AND CUSTOMER_ID = 
cartRecordDto.getCartRecordDtosByCustomerId=SELECT CL.CUSTOMER_ID, CL.PRODUCT_ID, CL.SHORT_DESCRIPTION, CL.QUANTITY, CL.PRICE, CL.SUMMA FROM CART_SUM AS CL ORDER BY CL.SHORT_DESCRIPTION;
cartRecordDto.findCartRecordDtosSumByCustomerId=SELECT SUM(SUMMA) FROM CART_SUM;